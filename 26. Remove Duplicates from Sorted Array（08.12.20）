题目：
Given a sorted array nums, remove the duplicates in-place such that each element appear only once and return the new length.

Do not allocate extra space for another array, you must do this by modifying the input array in-place with O(1) extra memory.

Example 1:

Given nums = [1,1,2],

Your function should return length = 2, with the first two elements of nums being 1 and 2 respectively.

It doesn't matter what you leave beyond the returned length.

Example 2:

Given nums = [0,0,1,1,1,2,2,3,3,4],

Your function should return length = 5, with the first five elements of nums being modified to 0, 1, 2, 3, and 4 respectively.

It doesn't matter what values are set beyond the returned length.

Clarification:

Confused why the returned value is an integer but your answer is an array?

Note that the input array is passed in by reference, which means modification to the input array will be known to the caller as well.

Internally you can think of this:

// nums is passed in by reference. (i.e., without making a copy)
int len = removeDuplicates(nums);

// any modification to nums in your function would be known by the caller.
// using the length returned by your function, it prints the first len elements.
for (int i = 0; i < len; i++) {
    print(nums[i]);
}

我的答案：
class Solution {
    public int removeDuplicates(int[] nums) {
        if (nums.length < 2) return nums.length;
        int i = 0;
        for (int j = 1; j < nums.length; j++){
            if (nums[j] != nums[i]){
                nums[++i] = nums[j];
            }
        }
        return i + 1;
    }
}

评价：easy
1. 注意是sorted array，所以只需要和前一个元素比较
2. 先设想各种例外情况并判断
3. 从第0个元素开始和后面的元素比较，全部在for loop里面完成
4. 实际上是两个指针，i在前面，j在后面一个，j指针所在的元素如果与i指针所在的元素相同，那么就把j指针的元素留在那里，并且i和j都向后移动一个，注意这里向后移动指针是在两个不同的地方完成的
5. 如果后一个元素和前一个元素相同，那么前一个元素的指针i不移动，但是j向后移动，直到找到和指针i处元素不同的元素，赋给i后面的一个位置
