Given a m x n grid filled with non-negative numbers, find a path from top left to bottom right which minimizes the sum of all numbers along its path.

Note: You can only move either down or right at any point in time.

Example:

Input:
[
  [1,3,1],
  [1,5,1],
  [4,2,1]
]
Output: 7
Explanation: Because the path 1→3→1→1→1 minimizes the sum.


我的答案：
用一个dp存储结果，并且把二维压缩成一维
class Solution {
    public int minPathSum(int[][] grid) {
        int col = grid[0].length;
        int[] dp = new int[col];
        dp[0] = grid[0][0];
        for (int i = 1; i < col; i++) dp[i] = dp[i - 1] + grid[0][i];
        for (int i = 1; i < grid.length; i++){
            dp[0] = dp[0] + grid[i][0];
            for (int j = 1; j < col; j++) dp[j] = grid[i][j] + Math.min(dp[j - 1], dp[j]);
        }
        return dp[col - 1];
    }
}

评价：中规中矩的medium

参考讲解：
解题思路：

此题是典型的动态规划题目。

    状态定义：
        设 dpdpdp 为大小 m×nm \times nm×n 矩阵，其中 dp[i][j]dp[i][j]dp[i][j] 的值代表直到走到 (i,j)(i,j)(i,j) 的最小路径和。

    转移方程：

        题目要求，只能向右或向下走，换句话说，当前单元格 (i,j)(i,j)(i,j) 只能从左方单元格 (i−1,j)(i-1,j)(i−1,j) 或上方单元格 (i,j−1)(i,j-1)(i,j−1) 走到，因此只需要考虑矩阵左边界和上边界。

        走到当前单元格 (i,j)(i,j)(i,j) 的最小路径和 === “从左方单元格 (i−1,j)(i-1,j)(i−1,j) 与 从上方单元格 (i,j−1)(i,j-1)(i,j−1) 走来的 两个最小路径和中较小的 ” +++ 当前单元格值 grid[i][j]grid[i][j]grid[i][j] 。具体分为以下 444 种情况：
        当左边和上边都不是矩阵边界时： 即当i≠0i \not= 0i​=0, j≠0j \not= 0j​=0时，dp[i][j]=min(dp[i−1][j],dp[i][j−1])+grid[i][j]dp[i][j] = min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j]dp[i][j]=min(dp[i−1][j],dp[i][j−1])+grid[i][j] ；
        当只有左边是矩阵边界时： 只能从上面来，即当i=0,j≠0i = 0, j \not= 0i=0,j​=0时， dp[i][j]=dp[i][j−1]+grid[i][j]dp[i][j] = dp[i][j - 1] + grid[i][j]dp[i][j]=dp[i][j−1]+grid[i][j] ；
        当只有上边是矩阵边界时： 只能从左面来，即当i≠0,j=0i \not= 0, j = 0i​=0,j=0时， dp[i][j]=dp[i−1][j]+grid[i][j]dp[i][j] = dp[i - 1][j] + grid[i][j]dp[i][j]=dp[i−1][j]+grid[i][j] ；
        当左边和上边都是矩阵边界时： 即当i=0,j=0i = 0, j = 0i=0,j=0时，其实就是起点， dp[i][j]=grid[i][j]dp[i][j] = grid[i][j]dp[i][j]=grid[i][j]；

    初始状态：
        dpdpdp 初始化即可，不需要修改初始 000 值。

    返回值：
        返回 dpdpdp 矩阵右下角值，即走到终点的最小路径和。

其实我们完全不需要建立 dpdpdp 矩阵浪费额外空间，直接遍历 grid[i][j]grid[i][j]grid[i][j] 修改即可。这是因为：grid[i][j] = min(grid[i - 1][j], grid[i][j - 1]) + grid[i][j] ；原 gridgridgrid 矩阵元素中被覆盖为 dpdpdp 元素后（都处于当前遍历点的左上方），不会再被使用到。
复杂度分析：

    时间复杂度 O(M×N)O(M \times N)O(M×N) ： 遍历整个 gridgridgrid 矩阵元素。
    空间复杂度 O(1)O(1)O(1) ： 直接修改原矩阵，不使用额外空间。

代码：

class Solution {
    public int minPathSum(int[][] grid) {
        for(int i = 0; i < grid.length; i++) {
            for(int j = 0; j < grid[0].length; j++) {
                if(i == 0 && j == 0) continue;
                else if(i == 0)  grid[i][j] = grid[i][j - 1] + grid[i][j];
                else if(j == 0)  grid[i][j] = grid[i - 1][j] + grid[i][j];
                else grid[i][j] = Math.min(grid[i - 1][j], grid[i][j - 1]) + grid[i][j];
            }
        }
        return grid[grid.length - 1][grid[0].length - 1];
    }
}

作者：jyd
链接：https://leetcode-cn.com/problems/minimum-path-sum/solution/zui-xiao-lu-jing-he-dong-tai-gui-hua-gui-fan-liu-c/
来源：力扣（LeetCode）
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。
