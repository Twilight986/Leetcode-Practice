You should design a data structure that supports adding new words and finding if a string matches any previously added string.

Implement the WordDictionary class:

    WordDictionary() Initializes the object.
    void addWord(word) adds word to the data structure, it can be matched later.
    bool search(word) returns true if there is any string in the data structure that matches word or false otherwise. word may contain dots '.' where dots can be matched with any letter.

 

Example:

Input
["WordDictionary","addWord","addWord","addWord","search","search","search","search"]
[[],["bad"],["dad"],["mad"],["pad"],["bad"],[".ad"],["b.."]]
Output
[null,null,null,null,false,true,true,true]

Explanation
WordDictionary wordDictionary = new WordDictionary();
wordDictionary.addWord("bad");
wordDictionary.addWord("dad");
wordDictionary.addWord("mad");
wordDictionary.search("pad"); // return False
wordDictionary.search("bad"); // return True
wordDictionary.search(".ad"); // return True
wordDictionary.search("b.."); // return True

 

Constraints:

    1 <= word.length <= 500
    word in addWord consists lower-case English letters.
    word in search consist of  '.' or lower-case English letters.
    At most 50000 calls will be made to addWord and search .


我的答案：
class WordDictionary {
    
    class Node{
        Node[] next;
        boolean flag;
        
        public Node(){
            next = new Node[26];
            flag = false;
            for (int i = 0; i < 26; i++) next[i] = null;
        }
    }

    public Node head;
    /** Initialize your data structure here. */
    public WordDictionary() {
        head = new Node();
    }
    
    /** Adds a word into the data structure. */
    public void addWord(String word) {
        char[] single = word.toCharArray();
        Node curr = head;
        for (int i = 0; i < single.length; i++){
            if (curr.next[single[i] - 'a'] == null) curr.next[single[i] - 'a'] = new Node();
            curr = curr.next[single[i] - 'a'];
        }
        curr.flag = true;
    }
    
    /** Returns if the word is in the data structure. A word could contain the dot character '.' to represent any one letter. */
    public boolean search(String word) {
        return searchHelper(word, head);
    }
    
    public boolean searchHelper(String word, Node node){
        char[] wordArr = word.toCharArray();
        Node curr = node;
        for (int i = 0; i < wordArr.length; i++){
            if (wordArr[i] == '.'){
                for (int j = 0; j < 26; j++){
                    if (curr.next[j] != null){
                        if (searchHelper(word.substring(i + 1), curr.next[j])) return true;
                    }
                }
                return false;
            }
            if (curr.next[wordArr[i] - 'a'] == null) return false;
            curr = curr.next[wordArr[i] - 'a'];
        }
        return curr.flag;
    }
}

/**
 * Your WordDictionary object will be instantiated and called as such:
 * WordDictionary obj = new WordDictionary();
 * obj.addWord(word);
 * boolean param_2 = obj.search(word);
 */
 
 评价：medium
 
 参考讲解：
 class WordDictionary {
    class TrieNode {
        TrieNode[] children;
        boolean flag;

        public TrieNode() {
            children = new TrieNode[26];
            flag = false;
            for (int i = 0; i < 26; i++) {
                children[i] = null;
            }
        }

    }
    TrieNode root;

    /** Initialize your data structure here. */
    public WordDictionary() {
        root = new TrieNode();
    }

    /** Adds a word into the data structure. */
    public void addWord(String word) {
        char[] array = word.toCharArray();
        TrieNode cur = root;
        for (int i = 0; i < array.length; i++) {
            // 当前孩子是否存在
            if (cur.children[array[i] - 'a'] == null) {
                cur.children[array[i] - 'a'] = new TrieNode();
            }
            cur = cur.children[array[i] - 'a'];
        }
        // 当前节点代表结束
        cur.flag = true;
    }

    /**
	 * Returns if the word is in the data structure. A word could contain the
	 * dot character '.' to represent any one letter.
	 */
    public boolean search(String word) {
        return searchHelp(word, root);
    }

    private boolean searchHelp(String word, TrieNode root) {
        char[] array = word.toCharArray();
        TrieNode cur = root;
        for (int i = 0; i < array.length; i++) {
            // 对于 . , 递归的判断所有不为空的孩子
            if(array[i] == '.'){
                for(int j = 0;j < 26; j++){
                    if(cur.children[j] != null){
                        if(searchHelp(word.substring(i + 1),cur.children[j])){
                            return true;
                        }
                    }
                }
                return false;
            }
            // 不含有当前节点
            if (cur.children[array[i] - 'a'] == null) {
                return false;
            }
            cur = cur.children[array[i] - 'a'];
        }
        // 当前节点是否为是某个单词的结束
        return cur.flag;
    }
}


作者：windliang
链接：https://leetcode-cn.com/problems/design-add-and-search-words-data-structure/solution/xiang-xi-tong-su-de-si-lu-fen-xi-duo-jie-fa-by--43/
来源：力扣（LeetCode）
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。
