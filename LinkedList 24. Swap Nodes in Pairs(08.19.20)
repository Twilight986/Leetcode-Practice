Given a linked list, swap every two adjacent nodes and return its head.

You may not modify the values in the list's nodes, only nodes itself may be changed.

 

Example:

Given 1->2->3->4, you should return the list as 2->1->4->3.


我的答案：
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode swapPairs(ListNode head) {
        ListNode node = new ListNode(0);
        node.next = head;  //用一个node指针来保存开始遍历的地方
        ListNode prev = node;
        while((head != null) && (head.next != null)){
            ListNode firstNode = head;
            ListNode secondNode = head.next;
            prev.next = secondNode;   //前置指针指到后面
            firstNode.next = secondNode.next;
            secondNode.next = firstNode;
            prev = firstNode;
            head = firstNode.next;
        }
        return node.next;
    }
}

评价：medium

参考讲解：
思路

    标签：链表
    本题的递归和非递归解法其实原理类似，都是更新每两个点的链表形态完成整个链表的调整
    其中递归解法可以作为典型的递归解决思路进行讲解

递归写法要观察本级递归的解决过程，形成抽象模型，因为递归本质就是不断重复相同的事情。而不是去思考完整的调用栈，一级又一级，无从下手。如图所示，我们应该关注一级调用小单元的情况，也就是单个f(x)。

fr<x>ame_00007.png

其中我们应该关心的主要有三点：

    返回值
    调用单元做了什么
    终止条件

在本题中：

    返回值：交换完成的子链表
    调用单元：设需要交换的两个点为 head 和 next，head 连接后面交换完成的子链表，next 连接 head，完成交换
    终止条件：head 为空指针或者 next 为空指针，也就是当前无节点或者只有一个节点，无法进行交换

代码

递归解法

class Solution {
    public ListNode swapPairs(ListNode head) {
        if(head == null || head.next == null){
            return head;
        }
        ListNode next = head.next;  //创建一个next节点
        head.next = swapPairs(next.next);  //开始进行交换，将head指向已经交换完成的部分/或者说指向后面，而后面已经交换完了（可以当做一个从底向上的过程，我从最后一个开始交换，假设已经交换完了，就是用我递归的方法交换的，返回值是最前面的那个节点，所以返回值也确定了，我现在要考虑的就是重复的最后一步）
        next.next = head;  //将next节点移到前面
        return next;
    }
}

非递归解法

class Solution {
    public ListNode swapPairs(ListNode head) {
        ListNode pre = new ListNode(0);
        pre.next = head;
        ListNode temp = pre;
        while(temp.next != null && temp.next.next != null) {
            ListNode start = temp.next;
            ListNode end = temp.next.next;
            temp.next = end;
            start.next = end.next;
            end.next = start;
            temp = start;
        }
        return pre.next;
    }
}

作者：guanpengchn
链接：https://leetcode-cn.com/problems/swap-nodes-in-pairs/solution/hua-jie-suan-fa-24-liang-liang-jiao-huan-lian-biao/
