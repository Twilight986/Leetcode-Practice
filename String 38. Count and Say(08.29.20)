The count-and-say sequence is the sequence of integers with the first five terms as following:

1.     1
2.     11
3.     21
4.     1211
5.     111221

1 is read off as "one 1" or 11.
11 is read off as "two 1s" or 21.
21 is read off as "one 2, then one 1" or 1211.

Given an integer n where 1 ≤ n ≤ 30, generate the nth term of the count-and-say sequence. You can do so recursively, in other words from the previous member read off the digits, counting the number of digits in groups of the same digit.

Note: Each term of the sequence of integers will be represented as a string.

 

Example 1:

Input: 1
Output: "1"
Explanation: This is the base case.

Example 2:

Input: 4
Output: "1211"
Explanation: For n = 3 the term was "21" in which we have two groups "2" and "1", "2" can be read as "12" which means frequency = 1 and value = 2, the same way "1" is read as "11", so the answer is the concatenation of "12" and "11" which is "1211".



我的答案：
class Solution {
    public String countAndSay(int n) {
        StringBuilder result = new StringBuilder();
        if (n == 1) return "1";
        int curr = 1;
        int p = 0;
        String temp = countAndSay(n - 1);
        for (; curr < temp.length(); curr++){
            if (temp.charAt(p) != temp.charAt(curr)){
                int count = curr - p;
                result.append(count).append(temp.charAt(p));
                p = curr;
            }
        }
        if (p != curr) result.append(curr - p).append(temp.charAt(p));
        return result.toString();
    }
}

评价：easy

参考讲解：
public static String countAndSay1(int n) {
        StringBuilder s = new StringBuilder();
        int p1 = 0;
        int cur = 1;
        if ( n == 1 )
            return "1";
        String str = countAndSay(n - 1);
        for ( cur = 1; cur < str.length(); cur++ ) {
            if ( str.charAt(p1) != str.charAt(cur) ) {// 如果碰到当前字符与前面紧邻的字符不等则更新此次结果
                int count = cur - p1;
                s.append(count).append(str.charAt(p1));
                p1 = cur;
            }
        }
//        if ( p1 != cur ){// 防止最后一段数相等，如果不等说明p1到cur-1这段字符串是相等的
//            int count = cur - p1;
//            s.append(count).append(str.charAt(p1));
//        }

        s.append(cur-p1).append(str.charAt(p1));
        return s.toString();
    }
