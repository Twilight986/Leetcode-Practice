#题目：
Given a 32-bit signed integer, reverse digits of an integer.

Example 1:

Input: 123
Output: 321

Example 2:

Input: -123
Output: -321

Example 3:

Input: 120
Output: 21

Note:
Assume we are dealing with an environment which could only store integers within the 32-bit signed integer range: [−2^31,  2^31 − 1]. For the purpose of this problem, assume that your function returns 0 when the reversed integer overflows.


#我的答案：
class Solution {
    public int reverse(int x) {
        int reverse = 0;
        while (x != 0){
            int digit = x % 10;
            x /= 10;
            if (reverse > (Integer.MAX_VALUE / 10) || (reverse == (Integer.MAX_VALUE / 10) && digit > pop > Integer.MAX_VALUE % 10)) return 0;
            if (reverse < (Integer.MIN_VALUE / 10) || (reverse == (Integer.MIN_VALUE / 10) && digit < Integer.MIN_VALUE % 10)) return 0;
            reverse = reverse * 10 + digit;
        }
        return reverse;
    }
}

#评价：easy
注意
Integer.MAX_VALUE = 2^31 − 1, Integer.MIN_VALUE = −2^31
还有就是取余和判断
