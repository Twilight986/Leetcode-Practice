Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.

(i.e.,  [0,1,2,4,5,6,7] might become  [4,5,6,7,0,1,2]).

Find the minimum element.

The array may contain duplicates.

Example 1:

Input: [1,3,5]
Output: 1

Example 2:

Input: [2,2,2,0,1]
Output: 0

Note:

    This is a follow up problem to Find Minimum in Rotated Sorted Array.
    Would allow duplicates affect the run-time complexity? How and why?



我的答案：
class Solution {
    public int findMin(int[] nums) {
        int left = 0, right = nums.length - 1;
        while(left < right){
            int mid = left + (right - left) / 2;
            if (nums[mid] > nums[right]) left = mid + 1;
            else if (nums[mid] < nums[right]) right = mid;
            else if (nums[mid] == nums[right]) right--;
        }
        return nums[left];
    }
}

评价：hard

参考讲解：
思路：

    旋转排序数组 numsnumsnums 可以被拆分为 2 个排序数组 nums1nums1nums1 , nums2nums2nums2 ，并且 nums1任一元素 >= nums2任一元素；因此，考虑二分法寻找此两数组的分界点 nums[i]nums[i]nums[i] (即第 2 个数组的首个元素)。
    设置 leftleftleft, rightrightright 指针在 numsnumsnums 数组两端，midmidmid 为每次二分的中点：
        当 nums[mid] > nums[right]时，midmidmid 一定在第 1 个排序数组中，iii 一定满足 mid < i <= right，因此执行 left = mid + 1；
        当 nums[mid] < nums[right] 时，midmidmid 一定在第 2 个排序数组中，iii 一定满足 left < i <= mid，因此执行 right = mid；
        当 nums[mid] == nums[right] 时，是此题对比 153题 的难点（原因是此题中数组的元素可重复，难以判断分界点 iii 指针区间）；
            例如 [1,0,1,1,1][1, 0, 1, 1, 1][1,0,1,1,1] 和 [1,1,1,0,1][1, 1, 1, 0, 1][1,1,1,0,1] ，在 left = 0, right = 4, mid = 2 时，无法判断 midmidmid 在哪个排序数组中。
            我们采用 right = right - 1 解决此问题，证明：
                此操作不会使数组越界：因为迭代条件保证了 right > left >= 0；
                此操作不会使最小值丢失：假设 nums[right]nums[right]nums[right] 是最小值，有两种情况：
                    若 nums[right]nums[right]nums[right] 是唯一最小值：那就不可能满足判断条件 nums[mid] == nums[right]，因为 mid < right（left != right 且 mid = (left + right) // 2 向下取整）；
                    若 nums[right]nums[right]nums[right] 不是唯一最小值，由于 mid < right 而 nums[mid] == nums[right]，即还有最小值存在于 [left,right−1][left, right - 1][left,right−1] 区间，因此不会丢失最小值。
    以上是理论分析，可以代入以下数组辅助思考：
        [1,2,3][1, 2, 3][1,2,3]
        [1,1,0,1][1, 1, 0, 1][1,1,0,1]
        [1,0,1,1,1][1, 0, 1, 1, 1][1,0,1,1,1]
        [1,1,1,1][1, 1, 1, 1][1,1,1,1]
    时间复杂度 O(logN)O(logN)O(logN)，在特例情况下会退化到 O(N)O(N)O(N)（例如 [1,1,1,1][1, 1, 1, 1][1,1,1,1]）。

图解：

代码：

class Solution:
    def findMin(self, nums: List[int]) -> int:
        left, right = 0, len(nums) - 1
        while left < right:
            mid = (left + right) // 2
            if nums[mid] > nums[right]: left = mid + 1
            elif nums[mid] < nums[right]: right = mid
            else: right = right - 1 # key
        return nums[left]

作者：jyd
链接：https://leetcode-cn.com/problems/find-minimum-in-rotated-sorted-array-ii/solution/154-find-minimum-in-rotated-sorted-array-ii-by-jyd/
来源：力扣（LeetCode）
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。
在中间值等于右边界值是，做了 2 次判断，针对该题解进行点优化。

    如果是[0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1] 这情况情况
    虽然中间值等于右边，但是中间值小于左边，说明肯定在左半部分
    题解里面如果相等直接减 1 ，这一处可以进行优化。能少减几个是几个，万一有 1 亿 个呢。

public int findMin(int[] nums) {
    if (nums == null || nums.length == 0) return -1;
    int length = nums.length - 1;
    if (nums[length] > nums[0]) return nums[0]; // 如果已经有序

    int from = 0, to = length;
    while (from < to) {
        // 如果 nums[from] < nums[to] 表示有序返回 nums[0] 即可
        if (nums[from] < nums[to]) return nums[from];
        int mid = (from + to) >> 1;
        int num = nums[mid];
        // 如果中间值大于等于右边值，说明反转部分在右边，否则在左边
        if (num > nums[to]) from = mid + 1;
        else if (num < nums[to]) to = mid;
        else {
            // 如果等于中间值，不确定左右时，比如 [1,1,0,1,1,1,1,1] 这种情况，我们只能随机缩减另一边
            if (num == nums[from]) to--;
            else to = mid; // 在左半部分
        }
    }
    return nums[from];
}
