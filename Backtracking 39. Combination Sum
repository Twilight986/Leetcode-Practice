Given a set of candidate numbers (candidates) (without duplicates) and a target number (target), find all unique combinations in candidates where the candidate numbers sums to target.

The same repeated number may be chosen from candidates unlimited number of times.

Note:

    All numbers (including target) will be positive integers.
    The solution set must not contain duplicate combinations.

Example 1:

Input: candidates = [2,3,6,7], target = 7,
A solution set is:
[
  [7],
  [2,2,3]
]

Example 2:

Input: candidates = [2,3,5], target = 8,
A solution set is:
[
  [2,2,2,2],
  [2,3,3],
  [3,5]
]

 

Constraints:

    1 <= candidates.length <= 30
    1 <= candidates[i] <= 200
    Each element of candidate is unique.
    1 <= target <= 500


我的答案：
class Solution {
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        List<List<Integer>> result = new ArrayList<>();
        int n = candidates.length;
        Arrays.sort(candidates);
        getCandidate(0, target, candidates, n, new ArrayList<Integer>(), result);
        return result;
    }
    
    public void getCandidate(int start, int target, int[] candidates, int n, ArrayList<Integer> curr, List<List<Integer>> result){
        if (target == 0){
            result.add(new ArrayList(curr));
            return;
        }
        for (int i = start; i < n; i++){
            if (target - candidates[i] < 0) break;
            curr.add(candidates[i]);
            getCandidate(i, target - candidates[i], candidates, n, curr, result);
            curr.remove(curr.size() - 1);
        }
    }
}
